//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace InfoHub
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace InfoHub.InfoHub_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::InfoHub.Common.LayoutAwarePage(); }

        private object Activate_1_AppHubViewModel() { return new global::InfoHub.AppHubViewModel(); }

        private object Activate_2_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Helpers.GroupedItem>(); }

        private object Activate_3_Collection() { return new global::System.Collections.ObjectModel.Collection<global::InfoHub.Helpers.GroupedItem>(); }

        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Articles.IArticle>(); }

        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::InfoHub.Articles.IArticle>(); }

        private object Activate_13_SnapConverter() { return new global::InfoHub.Helpers.SnapConverter(); }

        private object Activate_14_BooleanToVisibilityConverter() { return new global::InfoHub.Common.BooleanToVisibilityConverter(); }

        private object Activate_15_AdControl() { return new global::Microsoft.Advertising.WinRT.UI.AdControl(); }

        private object Activate_16_Browser() { return new global::InfoHub.Common.Browser(); }

        private object Activate_17_GridView() { return new global::InfoHub.Helpers.GridView(); }

        private object Activate_18_TemplateSelector() { return new global::InfoHub.Helpers.TemplateSelector(); }

        private object Activate_19_SnapListView() { return new global::InfoHub.Helpers.SnapListView(); }

        private object Activate_20_AppHub_Classic() { return new global::InfoHub.AppHub_Classic(); }

        private object Activate_21_AppHub_Sports() { return new global::InfoHub.AppHub_Sports(); }

        private object Activate_22_ExtendedStart() { return new global::InfoHub.ExtendedStart(); }

        private object Activate_23_About() { return new global::InfoHub.Flyouts.About(); }

        private object Activate_24_Privacy() { return new global::InfoHub.Privacy(); }

        private object Activate_27_DateStringConverter() { return new global::InfoHub.Helpers.DateStringConverter(); }

        private void VectorAdd_2_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::InfoHub.Helpers.GroupedItem>)instance;
            var newItem = (global::InfoHub.Helpers.GroupedItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_3_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::InfoHub.Helpers.GroupedItem>)instance;
            var newItem = (global::InfoHub.Helpers.GroupedItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::InfoHub.Articles.IArticle>)instance;
            var newItem = (global::InfoHub.Articles.IArticle)item;
            collection.Add(newItem);
        }

        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::InfoHub.Articles.IArticle>)instance;
            var newItem = (global::InfoHub.Articles.IArticle)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Int32":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Boolean":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Double":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.Visibility":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Visibility));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Controls.GridView":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.GridView));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Windows.UI.Xaml.Controls.DataTemplateSelector":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.Controls.ListView":
                xamlType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ListView));
                break;

            case "InfoHub.Common.LayoutAwarePage":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "InfoHub.AppHubViewModel":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.AppHubViewModel), GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_AppHubViewModel;
                userType.AddMemberName("Feeds");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Helpers.GroupedItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<InfoHub.Helpers.GroupedItem>");
                userType.AddMemberName("Longitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Latitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SubTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AdAppId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AdUnitId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SummaryData");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SummaryVisibility");
                userType.AddMemberName("HighlightedArticle");
                userType.AddMemberName("SelectedArticle");
                userType.AddMemberName("ReloadAllCommand");
                userType.AddMemberName("LoadFeedCommand");
                AddToMapOfTypeToStandardName(typeof(global::InfoHub.Helpers.DelegateCommand<global::System.String>),
                                                   "InfoHub.Helpers.DelegateCommand<String>");
                userType.AddMemberName("HideAds");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PurchaseHideAdsCommand");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<InfoHub.Helpers.GroupedItem>":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Helpers.GroupedItem>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<InfoHub.Helpers.GroupedItem>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Helpers.GroupedItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<InfoHub.Helpers.GroupedItem>");
                userType.Activator = Activate_2_ObservableCollection;
                userType.CollectionAdd = VectorAdd_2_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<InfoHub.Helpers.GroupedItem>":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::InfoHub.Helpers.GroupedItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::InfoHub.Helpers.GroupedItem>),
                                                   "System.Collections.ObjectModel.Collection<InfoHub.Helpers.GroupedItem>");
                userType.Activator = Activate_3_Collection;
                userType.CollectionAdd = VectorAdd_3_Collection;
                xamlType = userType;
                break;

            case "InfoHub.Helpers.GroupedItem":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.GroupedItem), GetXamlTypeByName("Object"));
                userType.AddMemberName("Feed");
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Articles");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Articles.IArticle>),
                                                   "System.Collections.ObjectModel.ObservableCollection<InfoHub.Articles.IArticle>");
                xamlType = userType;
                break;

            case "InfoHub.Feeds.IFeed":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Feeds.IFeed), null);
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<InfoHub.Articles.IArticle>":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Articles.IArticle>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<InfoHub.Articles.IArticle>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Articles.IArticle>),
                                                   "System.Collections.ObjectModel.ObservableCollection<InfoHub.Articles.IArticle>");
                userType.Activator = Activate_6_ObservableCollection;
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<InfoHub.Articles.IArticle>":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::InfoHub.Articles.IArticle>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::InfoHub.Articles.IArticle>),
                                                   "System.Collections.ObjectModel.Collection<InfoHub.Articles.IArticle>");
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case "InfoHub.Articles.IArticle":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Articles.IArticle), null);
                userType.AddMemberName("Author");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Body");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Date");
                userType.AddMemberName("Image");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Url");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Index");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Hero");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ColSpan");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("RowSpan");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "InfoHub.Helpers.DelegateCommand":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.DelegateCommand), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "InfoHub.Helpers.DelegateCommand<String>":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.DelegateCommand<global::System.String>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::InfoHub.Helpers.DelegateCommand<global::System.String>),
                                                   "InfoHub.Helpers.DelegateCommand<String>");
                xamlType = userType;
                break;

            case "InfoHub.Helpers.SnapConverter":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.SnapConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_SnapConverter;
                xamlType = userType;
                break;

            case "InfoHub.Common.BooleanToVisibilityConverter":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Common.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "Microsoft.Advertising.WinRT.UI.AdControl":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.Advertising.WinRT.UI.AdControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_15_AdControl;
                userType.AddMemberName("Latitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Longitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("AdUnitId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ApplicationId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsEngaged");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAutoRefreshEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPerformanceScrollingEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UseStaticAnchor");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSuspended");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "InfoHub.Common.Browser":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Common.Browser), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_Browser;
                xamlType = userType;
                break;

            case "InfoHub.Helpers.GridView":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.GridView), GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_17_GridView;
                xamlType = userType;
                break;

            case "InfoHub.Helpers.TemplateSelector":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.TemplateSelector), GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_18_TemplateSelector;
                userType.AddMemberName("AdvertTemplateHero");
                userType.AddMemberName("AdvertTemplateNormal");
                userType.AddMemberName("CalendarTemplateHero");
                userType.AddMemberName("CalendarTemplateNormal");
                userType.AddMemberName("FlickrTemplateHero");
                userType.AddMemberName("FlickrTemplateNormal");
                userType.AddMemberName("NewsTemplateHero");
                userType.AddMemberName("NewsTemplateNormal");
                userType.AddMemberName("SummaryTemplateHero");
                userType.AddMemberName("SummaryTemplateNormal");
                userType.AddMemberName("TwitterTemplateHero");
                userType.AddMemberName("TwitterTemplateNormal");
                userType.AddMemberName("WeatherTemplateHero");
                userType.AddMemberName("WeatherTemplateNormal");
                userType.AddMemberName("YouTubeTemplateHero");
                userType.AddMemberName("YouTubeTemplateNormal");
                xamlType = userType;
                break;

            case "InfoHub.Helpers.SnapListView":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.SnapListView), GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_19_SnapListView;
                xamlType = userType;
                break;

            case "InfoHub.AppHub_Classic":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.AppHub_Classic), GetXamlTypeByName("InfoHub.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_AppHub_Classic;
                xamlType = userType;
                break;

            case "InfoHub.AppHub_Sports":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.AppHub_Sports), GetXamlTypeByName("InfoHub.Common.LayoutAwarePage"));
                userType.Activator = Activate_21_AppHub_Sports;
                xamlType = userType;
                break;

            case "InfoHub.ExtendedStart":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.ExtendedStart), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_ExtendedStart;
                xamlType = userType;
                break;

            case "InfoHub.Flyouts.About":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Flyouts.About), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_About;
                xamlType = userType;
                break;

            case "InfoHub.Privacy":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Privacy), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_24_Privacy;
                xamlType = userType;
                break;

            case "Windows.UI.Color":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color), GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("B");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("G");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("R");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "Byte":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Byte), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "InfoHub.Helpers.DateStringConverter":
                userType = new global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InfoHub.Helpers.DateStringConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_DateStringConverter;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Advertising.WinRT.UI.XamlAdControl_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_AppHubViewModel_Feeds(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.Feeds;
        }
        private object get_1_GroupedItem_Feed(object instance)
        {
            var that = (global::InfoHub.Helpers.GroupedItem)instance;
            return that.Feed;
        }
        private void set_1_GroupedItem_Feed(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.GroupedItem)instance;
            that.Feed = (global::InfoHub.Feeds.IFeed)Value;
        }
        private object get_2_GroupedItem_Header(object instance)
        {
            var that = (global::InfoHub.Helpers.GroupedItem)instance;
            return that.Header;
        }
        private object get_3_GroupedItem_Articles(object instance)
        {
            var that = (global::InfoHub.Helpers.GroupedItem)instance;
            return that.Articles;
        }
        private void set_3_GroupedItem_Articles(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.GroupedItem)instance;
            that.Articles = (global::System.Collections.ObjectModel.ObservableCollection<global::InfoHub.Articles.IArticle>)Value;
        }
        private object get_4_IArticle_Author(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Author;
        }
        private void set_4_IArticle_Author(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Author = (global::System.String)Value;
        }
        private object get_5_IArticle_Body(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Body;
        }
        private void set_5_IArticle_Body(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Body = (global::System.String)Value;
        }
        private object get_6_IArticle_Date(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Date;
        }
        private void set_6_IArticle_Date(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Date = (global::System.DateTime)Value;
        }
        private object get_7_IArticle_Image(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Image;
        }
        private void set_7_IArticle_Image(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Image = (global::System.String)Value;
        }
        private object get_8_IArticle_Title(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Title;
        }
        private void set_8_IArticle_Title(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_9_IArticle_Url(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Url;
        }
        private void set_9_IArticle_Url(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Url = (global::System.String)Value;
        }
        private object get_10_IArticle_Index(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Index;
        }
        private void set_10_IArticle_Index(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.Index = (global::System.Int32)Value;
        }
        private object get_11_IArticle_Hero(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.Hero;
        }
        private object get_12_IArticle_ColSpan(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.ColSpan;
        }
        private void set_12_IArticle_ColSpan(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.ColSpan = (global::System.Int32)Value;
        }
        private object get_13_IArticle_RowSpan(object instance)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            return that.RowSpan;
        }
        private void set_13_IArticle_RowSpan(object instance, object Value)
        {
            var that = (global::InfoHub.Articles.IArticle)instance;
            that.RowSpan = (global::System.Int32)Value;
        }
        private object get_14_AppHubViewModel_Longitude(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.Longitude;
        }
        private void set_14_AppHubViewModel_Longitude(object instance, object Value)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            that.Longitude = (global::System.Double)Value;
        }
        private object get_15_AppHubViewModel_Latitude(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.Latitude;
        }
        private void set_15_AppHubViewModel_Latitude(object instance, object Value)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            that.Latitude = (global::System.Double)Value;
        }
        private object get_16_AppHubViewModel_Title(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.Title;
        }
        private object get_17_AppHubViewModel_SubTitle(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.SubTitle;
        }
        private object get_18_AppHubViewModel_AdAppId(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.AdAppId;
        }
        private object get_19_AppHubViewModel_AdUnitId(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.AdUnitId;
        }
        private object get_20_AppHubViewModel_SummaryData(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.SummaryData;
        }
        private object get_21_AppHubViewModel_SummaryVisibility(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.SummaryVisibility;
        }
        private object get_22_AppHubViewModel_HighlightedArticle(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.HighlightedArticle;
        }
        private void set_22_AppHubViewModel_HighlightedArticle(object instance, object Value)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            that.HighlightedArticle = (global::InfoHub.Articles.IArticle)Value;
        }
        private object get_23_AppHubViewModel_SelectedArticle(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.SelectedArticle;
        }
        private void set_23_AppHubViewModel_SelectedArticle(object instance, object Value)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            that.SelectedArticle = (global::InfoHub.Articles.IArticle)Value;
        }
        private object get_24_AppHubViewModel_ReloadAllCommand(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.ReloadAllCommand;
        }
        private object get_25_AppHubViewModel_LoadFeedCommand(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.LoadFeedCommand;
        }
        private object get_26_AppHubViewModel_HideAds(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.HideAds;
        }
        private void set_26_AppHubViewModel_HideAds(object instance, object Value)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            that.HideAds = (global::System.Boolean)Value;
        }
        private object get_27_AppHubViewModel_PurchaseHideAdsCommand(object instance)
        {
            var that = (global::InfoHub.AppHubViewModel)instance;
            return that.PurchaseHideAdsCommand;
        }
        private object get_28_AdControl_Latitude(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.Latitude;
        }
        private void set_28_AdControl_Latitude(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.Latitude = (global::System.Double)Value;
        }
        private object get_29_AdControl_Longitude(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.Longitude;
        }
        private void set_29_AdControl_Longitude(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.Longitude = (global::System.Double)Value;
        }
        private object get_30_AdControl_AdUnitId(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.AdUnitId;
        }
        private void set_30_AdControl_AdUnitId(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.AdUnitId = (global::System.String)Value;
        }
        private object get_31_AdControl_ApplicationId(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.ApplicationId;
        }
        private void set_31_AdControl_ApplicationId(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.ApplicationId = (global::System.String)Value;
        }
        private object get_32_AdControl_IsEngaged(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsEngaged;
        }
        private object get_33_AdControl_IsAutoRefreshEnabled(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsAutoRefreshEnabled;
        }
        private void set_33_AdControl_IsAutoRefreshEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.IsAutoRefreshEnabled = (global::System.Boolean)Value;
        }
        private object get_34_AdControl_IsPerformanceScrollingEnabled(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsPerformanceScrollingEnabled;
        }
        private void set_34_AdControl_IsPerformanceScrollingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.IsPerformanceScrollingEnabled = (global::System.Boolean)Value;
        }
        private object get_35_AdControl_UseStaticAnchor(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.UseStaticAnchor;
        }
        private void set_35_AdControl_UseStaticAnchor(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.UseStaticAnchor = (global::System.Boolean)Value;
        }
        private object get_36_AdControl_IsSuspended(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsSuspended;
        }
        private object get_37_TemplateSelector_AdvertTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.AdvertTemplateHero;
        }
        private void set_37_TemplateSelector_AdvertTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.AdvertTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_38_TemplateSelector_AdvertTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.AdvertTemplateNormal;
        }
        private void set_38_TemplateSelector_AdvertTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.AdvertTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_39_TemplateSelector_CalendarTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.CalendarTemplateHero;
        }
        private void set_39_TemplateSelector_CalendarTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.CalendarTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_40_TemplateSelector_CalendarTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.CalendarTemplateNormal;
        }
        private void set_40_TemplateSelector_CalendarTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.CalendarTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_41_TemplateSelector_FlickrTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.FlickrTemplateHero;
        }
        private void set_41_TemplateSelector_FlickrTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.FlickrTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_42_TemplateSelector_FlickrTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.FlickrTemplateNormal;
        }
        private void set_42_TemplateSelector_FlickrTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.FlickrTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_43_TemplateSelector_NewsTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.NewsTemplateHero;
        }
        private void set_43_TemplateSelector_NewsTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.NewsTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_44_TemplateSelector_NewsTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.NewsTemplateNormal;
        }
        private void set_44_TemplateSelector_NewsTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.NewsTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_45_TemplateSelector_SummaryTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.SummaryTemplateHero;
        }
        private void set_45_TemplateSelector_SummaryTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.SummaryTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_46_TemplateSelector_SummaryTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.SummaryTemplateNormal;
        }
        private void set_46_TemplateSelector_SummaryTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.SummaryTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_47_TemplateSelector_TwitterTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.TwitterTemplateHero;
        }
        private void set_47_TemplateSelector_TwitterTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.TwitterTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_48_TemplateSelector_TwitterTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.TwitterTemplateNormal;
        }
        private void set_48_TemplateSelector_TwitterTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.TwitterTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_49_TemplateSelector_WeatherTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.WeatherTemplateHero;
        }
        private void set_49_TemplateSelector_WeatherTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.WeatherTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_50_TemplateSelector_WeatherTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.WeatherTemplateNormal;
        }
        private void set_50_TemplateSelector_WeatherTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.WeatherTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_51_TemplateSelector_YouTubeTemplateHero(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.YouTubeTemplateHero;
        }
        private void set_51_TemplateSelector_YouTubeTemplateHero(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.YouTubeTemplateHero = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_52_TemplateSelector_YouTubeTemplateNormal(object instance)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            return that.YouTubeTemplateNormal;
        }
        private void set_52_TemplateSelector_YouTubeTemplateNormal(object instance, object Value)
        {
            var that = (global::InfoHub.Helpers.TemplateSelector)instance;
            that.YouTubeTemplateNormal = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_53_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_53_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_54_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_54_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_55_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_55_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_56_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_56_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::InfoHub.InfoHub_XamlTypeInfo.XamlMember xamlMember = null;
            global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "InfoHub.AppHubViewModel.Feeds":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Feeds", "System.Collections.ObjectModel.ObservableCollection<InfoHub.Helpers.GroupedItem>");
                xamlMember.Getter = get_0_AppHubViewModel_Feeds;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.Helpers.GroupedItem.Feed":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.GroupedItem");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Feed", "InfoHub.Feeds.IFeed");
                xamlMember.Getter = get_1_GroupedItem_Feed;
                xamlMember.Setter = set_1_GroupedItem_Feed;
                break;
            case "InfoHub.Helpers.GroupedItem.Header":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.GroupedItem");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.Getter = get_2_GroupedItem_Header;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.Helpers.GroupedItem.Articles":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.GroupedItem");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Articles", "System.Collections.ObjectModel.ObservableCollection<InfoHub.Articles.IArticle>");
                xamlMember.Getter = get_3_GroupedItem_Articles;
                xamlMember.Setter = set_3_GroupedItem_Articles;
                break;
            case "InfoHub.Articles.IArticle.Author":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Author", "String");
                xamlMember.Getter = get_4_IArticle_Author;
                xamlMember.Setter = set_4_IArticle_Author;
                break;
            case "InfoHub.Articles.IArticle.Body":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Body", "String");
                xamlMember.Getter = get_5_IArticle_Body;
                xamlMember.Setter = set_5_IArticle_Body;
                break;
            case "InfoHub.Articles.IArticle.Date":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_6_IArticle_Date;
                xamlMember.Setter = set_6_IArticle_Date;
                break;
            case "InfoHub.Articles.IArticle.Image":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Image", "String");
                xamlMember.Getter = get_7_IArticle_Image;
                xamlMember.Setter = set_7_IArticle_Image;
                break;
            case "InfoHub.Articles.IArticle.Title":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_8_IArticle_Title;
                xamlMember.Setter = set_8_IArticle_Title;
                break;
            case "InfoHub.Articles.IArticle.Url":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Url", "String");
                xamlMember.Getter = get_9_IArticle_Url;
                xamlMember.Setter = set_9_IArticle_Url;
                break;
            case "InfoHub.Articles.IArticle.Index":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.Getter = get_10_IArticle_Index;
                xamlMember.Setter = set_10_IArticle_Index;
                break;
            case "InfoHub.Articles.IArticle.Hero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Hero", "Boolean");
                xamlMember.Getter = get_11_IArticle_Hero;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.Articles.IArticle.ColSpan":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "ColSpan", "Int32");
                xamlMember.Getter = get_12_IArticle_ColSpan;
                xamlMember.Setter = set_12_IArticle_ColSpan;
                break;
            case "InfoHub.Articles.IArticle.RowSpan":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Articles.IArticle");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "RowSpan", "Int32");
                xamlMember.Getter = get_13_IArticle_RowSpan;
                xamlMember.Setter = set_13_IArticle_RowSpan;
                break;
            case "InfoHub.AppHubViewModel.Longitude":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Longitude", "Double");
                xamlMember.Getter = get_14_AppHubViewModel_Longitude;
                xamlMember.Setter = set_14_AppHubViewModel_Longitude;
                break;
            case "InfoHub.AppHubViewModel.Latitude":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Latitude", "Double");
                xamlMember.Getter = get_15_AppHubViewModel_Latitude;
                xamlMember.Setter = set_15_AppHubViewModel_Latitude;
                break;
            case "InfoHub.AppHubViewModel.Title":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_16_AppHubViewModel_Title;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.SubTitle":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "SubTitle", "String");
                xamlMember.Getter = get_17_AppHubViewModel_SubTitle;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.AdAppId":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "AdAppId", "String");
                xamlMember.Getter = get_18_AppHubViewModel_AdAppId;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.AdUnitId":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "AdUnitId", "String");
                xamlMember.Getter = get_19_AppHubViewModel_AdUnitId;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.SummaryData":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "SummaryData", "Object");
                xamlMember.Getter = get_20_AppHubViewModel_SummaryData;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.SummaryVisibility":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "SummaryVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_21_AppHubViewModel_SummaryVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.HighlightedArticle":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "HighlightedArticle", "InfoHub.Articles.IArticle");
                xamlMember.Getter = get_22_AppHubViewModel_HighlightedArticle;
                xamlMember.Setter = set_22_AppHubViewModel_HighlightedArticle;
                break;
            case "InfoHub.AppHubViewModel.SelectedArticle":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "SelectedArticle", "InfoHub.Articles.IArticle");
                xamlMember.Getter = get_23_AppHubViewModel_SelectedArticle;
                xamlMember.Setter = set_23_AppHubViewModel_SelectedArticle;
                break;
            case "InfoHub.AppHubViewModel.ReloadAllCommand":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "ReloadAllCommand", "InfoHub.Helpers.DelegateCommand");
                xamlMember.Getter = get_24_AppHubViewModel_ReloadAllCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.LoadFeedCommand":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "LoadFeedCommand", "InfoHub.Helpers.DelegateCommand<String>");
                xamlMember.Getter = get_25_AppHubViewModel_LoadFeedCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.AppHubViewModel.HideAds":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "HideAds", "Boolean");
                xamlMember.Getter = get_26_AppHubViewModel_HideAds;
                xamlMember.Setter = set_26_AppHubViewModel_HideAds;
                break;
            case "InfoHub.AppHubViewModel.PurchaseHideAdsCommand":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.AppHubViewModel");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "PurchaseHideAdsCommand", "InfoHub.Helpers.DelegateCommand");
                xamlMember.Getter = get_27_AppHubViewModel_PurchaseHideAdsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.Latitude":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Latitude", "Double");
                xamlMember.Getter = get_28_AdControl_Latitude;
                xamlMember.Setter = set_28_AdControl_Latitude;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.Longitude":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "Longitude", "Double");
                xamlMember.Getter = get_29_AdControl_Longitude;
                xamlMember.Setter = set_29_AdControl_Longitude;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.AdUnitId":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "AdUnitId", "String");
                xamlMember.Getter = get_30_AdControl_AdUnitId;
                xamlMember.Setter = set_30_AdControl_AdUnitId;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.ApplicationId":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "ApplicationId", "String");
                xamlMember.Getter = get_31_AdControl_ApplicationId;
                xamlMember.Setter = set_31_AdControl_ApplicationId;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsEngaged":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "IsEngaged", "Boolean");
                xamlMember.Getter = get_32_AdControl_IsEngaged;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsAutoRefreshEnabled":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "IsAutoRefreshEnabled", "Boolean");
                xamlMember.Getter = get_33_AdControl_IsAutoRefreshEnabled;
                xamlMember.Setter = set_33_AdControl_IsAutoRefreshEnabled;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsPerformanceScrollingEnabled":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "IsPerformanceScrollingEnabled", "Boolean");
                xamlMember.Getter = get_34_AdControl_IsPerformanceScrollingEnabled;
                xamlMember.Setter = set_34_AdControl_IsPerformanceScrollingEnabled;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.UseStaticAnchor":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "UseStaticAnchor", "Boolean");
                xamlMember.Getter = get_35_AdControl_UseStaticAnchor;
                xamlMember.Setter = set_35_AdControl_UseStaticAnchor;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsSuspended":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "IsSuspended", "Boolean");
                xamlMember.Getter = get_36_AdControl_IsSuspended;
                xamlMember.SetIsReadOnly();
                break;
            case "InfoHub.Helpers.TemplateSelector.AdvertTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "AdvertTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_37_TemplateSelector_AdvertTemplateHero;
                xamlMember.Setter = set_37_TemplateSelector_AdvertTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.AdvertTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "AdvertTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_38_TemplateSelector_AdvertTemplateNormal;
                xamlMember.Setter = set_38_TemplateSelector_AdvertTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.CalendarTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "CalendarTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_39_TemplateSelector_CalendarTemplateHero;
                xamlMember.Setter = set_39_TemplateSelector_CalendarTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.CalendarTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "CalendarTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_40_TemplateSelector_CalendarTemplateNormal;
                xamlMember.Setter = set_40_TemplateSelector_CalendarTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.FlickrTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "FlickrTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_41_TemplateSelector_FlickrTemplateHero;
                xamlMember.Setter = set_41_TemplateSelector_FlickrTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.FlickrTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "FlickrTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_42_TemplateSelector_FlickrTemplateNormal;
                xamlMember.Setter = set_42_TemplateSelector_FlickrTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.NewsTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "NewsTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_43_TemplateSelector_NewsTemplateHero;
                xamlMember.Setter = set_43_TemplateSelector_NewsTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.NewsTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "NewsTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_44_TemplateSelector_NewsTemplateNormal;
                xamlMember.Setter = set_44_TemplateSelector_NewsTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.SummaryTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "SummaryTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_45_TemplateSelector_SummaryTemplateHero;
                xamlMember.Setter = set_45_TemplateSelector_SummaryTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.SummaryTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "SummaryTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_46_TemplateSelector_SummaryTemplateNormal;
                xamlMember.Setter = set_46_TemplateSelector_SummaryTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.TwitterTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "TwitterTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_47_TemplateSelector_TwitterTemplateHero;
                xamlMember.Setter = set_47_TemplateSelector_TwitterTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.TwitterTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "TwitterTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_48_TemplateSelector_TwitterTemplateNormal;
                xamlMember.Setter = set_48_TemplateSelector_TwitterTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.WeatherTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "WeatherTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_49_TemplateSelector_WeatherTemplateHero;
                xamlMember.Setter = set_49_TemplateSelector_WeatherTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.WeatherTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "WeatherTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_50_TemplateSelector_WeatherTemplateNormal;
                xamlMember.Setter = set_50_TemplateSelector_WeatherTemplateNormal;
                break;
            case "InfoHub.Helpers.TemplateSelector.YouTubeTemplateHero":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "YouTubeTemplateHero", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_51_TemplateSelector_YouTubeTemplateHero;
                xamlMember.Setter = set_51_TemplateSelector_YouTubeTemplateHero;
                break;
            case "InfoHub.Helpers.TemplateSelector.YouTubeTemplateNormal":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InfoHub.Helpers.TemplateSelector");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "YouTubeTemplateNormal", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_52_TemplateSelector_YouTubeTemplateNormal;
                xamlMember.Setter = set_52_TemplateSelector_YouTubeTemplateNormal;
                break;
            case "Windows.UI.Color.A":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_53_Color_A;
                xamlMember.Setter = set_53_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_54_Color_B;
                xamlMember.Setter = set_54_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_55_Color_G;
                xamlMember.Setter = set_55_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::InfoHub.InfoHub_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::InfoHub.InfoHub_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_56_Color_R;
                xamlMember.Setter = set_56_Color_R;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::InfoHub.InfoHub_XamlTypeInfo.XamlSystemBaseType
    {
        global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::InfoHub.InfoHub_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


